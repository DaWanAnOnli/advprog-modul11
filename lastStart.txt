Log file created at: 2024/05/16 10:45:04
Running on machine: DESKTOP-V5G8723
Binary: Built with gc go1.22.1 for windows/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0516 10:45:04.162073   30132 out.go:291] Setting OutFile to fd 412 ...
I0516 10:45:04.162073   30132 out.go:304] Setting ErrFile to fd 100...
I0516 10:45:04.185829   30132 out.go:298] Setting JSON to false
I0516 10:45:04.192424   30132 start.go:129] hostinfo: {"hostname":"DESKTOP-V5G8723","uptime":56382,"bootTime":1715774722,"procs":395,"os":"windows","platform":"Microsoft Windows 11 Home Single Language","platformFamily":"Standalone Workstation","platformVersion":"10.0.22631.3593 Build 22631.3593","kernelVersion":"10.0.22631.3593 Build 22631.3593","kernelArch":"x86_64","virtualizationSystem":"","virtualizationRole":"","hostId":"5d68e3c6-8965-4376-be23-f081b760cdaa"}
W0516 10:45:04.192424   30132 start.go:137] gopshost.Virtualization returned error: not implemented yet
I0516 10:45:04.192948   30132 out.go:177] 😄  minikube v1.33.1 on Microsoft Windows 11 Home Single Language 10.0.22631.3593 Build 22631.3593
I0516 10:45:04.195079   30132 notify.go:220] Checking for updates...
I0516 10:45:04.196130   30132 driver.go:392] Setting default libvirt URI to qemu:///system
I0516 10:45:04.196130   30132 global.go:112] Querying for installed drivers using PATH=C:\Python312\Scripts\;C:\Python312\;C:\Program Files\Microsoft\jdk-11.0.16.101-hotspot\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\PuTTY\;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\CMake\bin;C:\Program Files\Kubernetes\Minikube;C:\Users\Joel Rompis\.cargo\bin;C:\Users\Joel Rompis\AppData\Local\Programs\Python\Python311\Scripts\;C:\Users\Joel Rompis\AppData\Local\Programs\Python\Python311\;C:\Users\Joel Rompis\AppData\Local\Microsoft\WindowsApps;C:\Users\Joel Rompis\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\PyCharm Community Edition 2023.2.1\bin;;C:\Users\Joel Rompis\AppData\Local\GitHubDesktop\bin;C:\Flutter\flutter\bin;;C:\Program Files\JetBrains\IntelliJ IDEA 2023.3.3\bin;;C:\Users\Joel Rompis\AppData\Roaming\npm;C:\Users\Joel Rompis\AppData\Local\Microsoft\WinGet\Packages\Kubernetes.kubectl_Microsoft.Winget.Source_8wekyb3d8bbwe;
I0516 10:45:04.207666   30132 global.go:133] qemu2 default: true priority: 3, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "qemu-system-x86_64": executable file not found in %PATH% Reason: Fix:Install qemu-system Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/qemu/ Version:}
I0516 10:45:04.362763   30132 virtualbox.go:136] virtual box version: 7.0.10r158379
I0516 10:45:04.362908   30132 global.go:133] virtualbox default: true priority: 6, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:7.0.10r158379
}
I0516 10:45:04.371053   30132 global.go:133] vmware default: false priority: 5, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "vmrun": executable file not found in %PATH% Reason: Fix:Install vmrun Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/vmware/ Version:}
I0516 10:45:04.514876   30132 docker.go:122] docker version: linux-26.0.0:Docker Desktop 4.29.0 (145265)
I0516 10:45:04.520846   30132 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0516 10:45:04.852698   30132 info.go:266] docker info: {ID:a05468af-ed0b-489c-ad6a-96de5ea3f0e6 Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:55 OomKillDisable:true NGoroutines:81 SystemTime:2024-05-16 03:45:04.821758479 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:14 KernelVersion:5.15.146.1-microsoft-standard-WSL2 OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:16 MemTotal:8187711488 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=npipe://\\.\pipe\docker_cli] ExperimentalBuild:false ServerVersion:26.0.0 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:ae07eda36dd25f8a1b98dfbf587313b99c0190bb Expected:ae07eda36dd25f8a1b98dfbf587313b99c0190bb} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:C:\Program Files\Docker\cli-plugins\docker-buildx.exe SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.13.1-desktop.1] map[Name:compose Path:C:\Program Files\Docker\cli-plugins\docker-compose.exe SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.26.1-desktop.1] map[Name:debug Path:C:\Program Files\Docker\cli-plugins\docker-debug.exe SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container. Vendor:Docker Inc. Version:0.0.27] map[Name:dev Path:C:\Program Files\Docker\cli-plugins\docker-dev.exe SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:C:\Program Files\Docker\cli-plugins\docker-extension.exe SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.23] map[Name:feedback Path:C:\Program Files\Docker\cli-plugins\docker-feedback.exe SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.4] map[Name:init Path:C:\Program Files\Docker\cli-plugins\docker-init.exe SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.1.0] map[Name:sbom Path:C:\Program Files\Docker\cli-plugins\docker-sbom.exe SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:C:\Program Files\Docker\cli-plugins\docker-scout.exe SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.6.3]] Warnings:<nil>}}
I0516 10:45:04.852698   30132 global.go:133] docker default: true priority: 9, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0516 10:45:04.865351   30132 global.go:133] podman default: true priority: 3, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "podman": executable file not found in %PATH% Reason: Fix:Install Podman Doc:https://minikube.sigs.k8s.io/docs/drivers/podman/ Version:}
I0516 10:45:04.865351   30132 global.go:133] ssh default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0516 10:45:06.615139   30132 global.go:133] hyperv default: true priority: 8, state: {Installed:true Healthy:false Running:false NeedsImprovement:false Error:Hyper-V requires Administrator privileges Reason: Fix:Right-click the PowerShell icon and select Run as Administrator to open PowerShell in elevated mode. Doc: Version:}
I0516 10:45:06.615197   30132 driver.go:314] not recommending "ssh" due to default: false
I0516 10:45:06.615197   30132 driver.go:309] not recommending "hyperv" due to health: Hyper-V requires Administrator privileges
I0516 10:45:06.615197   30132 driver.go:349] Picked: docker
I0516 10:45:06.615197   30132 driver.go:350] Alternatives: [virtualbox ssh]
I0516 10:45:06.615197   30132 driver.go:351] Rejects: [qemu2 vmware podman hyperv]
I0516 10:45:06.616237   30132 out.go:177] ✨  Automatically selected the docker driver. Other choices: virtualbox, ssh
I0516 10:45:06.616459   30132 start.go:297] selected driver: docker
I0516 10:45:06.616459   30132 start.go:901] validating driver "docker" against <nil>
I0516 10:45:06.616459   30132 start.go:912] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0516 10:45:06.629388   30132 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0516 10:45:06.858534   30132 info.go:266] docker info: {ID:a05468af-ed0b-489c-ad6a-96de5ea3f0e6 Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:55 OomKillDisable:true NGoroutines:81 SystemTime:2024-05-16 03:45:06.827771314 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:14 KernelVersion:5.15.146.1-microsoft-standard-WSL2 OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:16 MemTotal:8187711488 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=npipe://\\.\pipe\docker_cli] ExperimentalBuild:false ServerVersion:26.0.0 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:ae07eda36dd25f8a1b98dfbf587313b99c0190bb Expected:ae07eda36dd25f8a1b98dfbf587313b99c0190bb} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:C:\Program Files\Docker\cli-plugins\docker-buildx.exe SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.13.1-desktop.1] map[Name:compose Path:C:\Program Files\Docker\cli-plugins\docker-compose.exe SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.26.1-desktop.1] map[Name:debug Path:C:\Program Files\Docker\cli-plugins\docker-debug.exe SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container. Vendor:Docker Inc. Version:0.0.27] map[Name:dev Path:C:\Program Files\Docker\cli-plugins\docker-dev.exe SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:C:\Program Files\Docker\cli-plugins\docker-extension.exe SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.23] map[Name:feedback Path:C:\Program Files\Docker\cli-plugins\docker-feedback.exe SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.4] map[Name:init Path:C:\Program Files\Docker\cli-plugins\docker-init.exe SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.1.0] map[Name:sbom Path:C:\Program Files\Docker\cli-plugins\docker-sbom.exe SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:C:\Program Files\Docker\cli-plugins\docker-scout.exe SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.6.3]] Warnings:<nil>}}
I0516 10:45:06.858534   30132 start_flags.go:310] no existing cluster config was found, will generate one from the flags 
I0516 10:45:06.898757   30132 start_flags.go:393] Using suggested 4000MB memory alloc based on sys=16108MB, container=7808MB
I0516 10:45:06.899312   30132 start_flags.go:929] Wait components to verify : map[apiserver:true system_pods:true]
I0516 10:45:06.899853   30132 out.go:177] 📌  Using Docker Desktop driver with root privileges
I0516 10:45:06.900447   30132 cni.go:84] Creating CNI manager for ""
I0516 10:45:06.900447   30132 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0516 10:45:06.900447   30132 start_flags.go:319] Found "bridge CNI" CNI - setting NetworkPlugin=cni
I0516 10:45:06.900447   30132 start.go:340] cluster config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4000 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:minikube Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:C:\Users\Joel Rompis:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0516 10:45:06.900981   30132 out.go:177] 👍  Starting "minikube" primary control-plane node in "minikube" cluster
I0516 10:45:06.901507   30132 cache.go:121] Beginning downloading kic base image for docker with docker
I0516 10:45:06.902243   30132 out.go:177] 🚜  Pulling base image v0.0.44 ...
I0516 10:45:06.902540   30132 preload.go:132] Checking if preload exists for k8s version v1.30.0 and runtime docker
I0516 10:45:06.902540   30132 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local docker daemon
I0516 10:45:06.902540   30132 preload.go:147] Found local preload: C:\Users\Joel Rompis\.minikube\cache\preloaded-tarball\preloaded-images-k8s-v18-v1.30.0-docker-overlay2-amd64.tar.lz4
I0516 10:45:06.902540   30132 cache.go:56] Caching tarball of preloaded images
I0516 10:45:06.903058   30132 preload.go:173] Found C:\Users\Joel Rompis\.minikube\cache\preloaded-tarball\preloaded-images-k8s-v18-v1.30.0-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0516 10:45:06.903058   30132 cache.go:59] Finished verifying existence of preloaded tar for v1.30.0 on docker
I0516 10:45:06.903574   30132 profile.go:143] Saving config to C:\Users\Joel Rompis\.minikube\profiles\minikube\config.json ...
I0516 10:45:06.903574   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\config.json: {Name:mk162a5621ed90c3332ee743a6975034f8ea3667 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:07.007166   30132 image.go:83] Found gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local docker daemon, skipping pull
I0516 10:45:07.007166   30132 cache.go:144] gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e exists in daemon, skipping load
I0516 10:45:07.007166   30132 cache.go:194] Successfully downloaded all kic artifacts
I0516 10:45:07.007166   30132 start.go:360] acquireMachinesLock for minikube: {Name:mk5c395a2beb7209bf0081babc131175ff2d124a Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0516 10:45:07.007166   30132 start.go:364] duration metric: took 0s to acquireMachinesLock for "minikube"
I0516 10:45:07.007670   30132 start.go:93] Provisioning new machine with config: &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4000 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:minikube Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:C:\Users\Joel Rompis:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} &{Name: IP: Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}
I0516 10:45:07.007670   30132 start.go:125] createHost starting for "" (driver="docker")
I0516 10:45:07.008193   30132 out.go:204] 🔥  Creating docker container (CPUs=2, Memory=4000MB) ...
I0516 10:45:07.008716   30132 start.go:159] libmachine.API.Create for "minikube" (driver="docker")
I0516 10:45:07.008716   30132 client.go:168] LocalClient.Create starting
I0516 10:45:07.008716   30132 main.go:141] libmachine: Reading certificate data from C:\Users\Joel Rompis\.minikube\certs\ca.pem
I0516 10:45:07.009297   30132 main.go:141] libmachine: Decoding PEM data...
I0516 10:45:07.009297   30132 main.go:141] libmachine: Parsing certificate...
I0516 10:45:07.009297   30132 main.go:141] libmachine: Reading certificate data from C:\Users\Joel Rompis\.minikube\certs\cert.pem
I0516 10:45:07.009859   30132 main.go:141] libmachine: Decoding PEM data...
I0516 10:45:07.009859   30132 main.go:141] libmachine: Parsing certificate...
I0516 10:45:07.017754   30132 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0516 10:45:07.132741   30132 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0516 10:45:07.140271   30132 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I0516 10:45:07.140271   30132 cli_runner.go:164] Run: docker network inspect minikube
W0516 10:45:07.255934   30132 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I0516 10:45:07.255934   30132 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube not found
I0516 10:45:07.255934   30132 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube not found

** /stderr **
I0516 10:45:07.262563   30132 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0516 10:45:07.405000   30132 network.go:206] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0xc001445530}
I0516 10:45:07.405000   30132 network_create.go:124] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0516 10:45:07.411852   30132 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube
I0516 10:45:07.545775   30132 network_create.go:108] docker network minikube 192.168.49.0/24 created
I0516 10:45:07.545775   30132 kic.go:121] calculated static IP "192.168.49.2" for the "minikube" container
I0516 10:45:07.561802   30132 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0516 10:45:07.677158   30132 cli_runner.go:164] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0516 10:45:07.793113   30132 oci.go:103] Successfully created a docker volume minikube
I0516 10:45:07.799472   30132 cli_runner.go:164] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -d /var/lib
I0516 10:45:08.577779   30132 oci.go:107] Successfully prepared a docker volume minikube
I0516 10:45:08.577779   30132 preload.go:132] Checking if preload exists for k8s version v1.30.0 and runtime docker
I0516 10:45:08.577779   30132 kic.go:194] Starting extracting preloaded images to volume ...
I0516 10:45:08.585179   30132 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v "C:\Users\Joel Rompis\.minikube\cache\preloaded-tarball\preloaded-images-k8s-v18-v1.30.0-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro" -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -I lz4 -xf /preloaded.tar -C /extractDir
I0516 10:45:16.025345   30132 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v "C:\Users\Joel Rompis\.minikube\cache\preloaded-tarball\preloaded-images-k8s-v18-v1.30.0-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro" -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -I lz4 -xf /preloaded.tar -C /extractDir: (7.4401662s)
I0516 10:45:16.025345   30132 kic.go:203] duration metric: took 7.447566s to extract preloaded images to volume ...
I0516 10:45:16.033954   30132 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0516 10:45:16.495723   30132 info.go:266] docker info: {ID:a05468af-ed0b-489c-ad6a-96de5ea3f0e6 Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:56 OomKillDisable:true NGoroutines:81 SystemTime:2024-05-16 03:45:16.466253546 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:14 KernelVersion:5.15.146.1-microsoft-standard-WSL2 OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:16 MemTotal:8187711488 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=npipe://\\.\pipe\docker_cli] ExperimentalBuild:false ServerVersion:26.0.0 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:ae07eda36dd25f8a1b98dfbf587313b99c0190bb Expected:ae07eda36dd25f8a1b98dfbf587313b99c0190bb} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:C:\Program Files\Docker\cli-plugins\docker-buildx.exe SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.13.1-desktop.1] map[Name:compose Path:C:\Program Files\Docker\cli-plugins\docker-compose.exe SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.26.1-desktop.1] map[Name:debug Path:C:\Program Files\Docker\cli-plugins\docker-debug.exe SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container. Vendor:Docker Inc. Version:0.0.27] map[Name:dev Path:C:\Program Files\Docker\cli-plugins\docker-dev.exe SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:C:\Program Files\Docker\cli-plugins\docker-extension.exe SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.23] map[Name:feedback Path:C:\Program Files\Docker\cli-plugins\docker-feedback.exe SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.4] map[Name:init Path:C:\Program Files\Docker\cli-plugins\docker-init.exe SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.1.0] map[Name:sbom Path:C:\Program Files\Docker\cli-plugins\docker-sbom.exe SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:C:\Program Files\Docker\cli-plugins\docker-scout.exe SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.6.3]] Warnings:<nil>}}
I0516 10:45:16.504245   30132 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0516 10:45:16.750737   30132 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=4000mb --memory-swap=4000mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e
I0516 10:45:17.167571   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Running}}
I0516 10:45:17.311651   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0516 10:45:17.484081   30132 cli_runner.go:164] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0516 10:45:17.726792   30132 oci.go:144] the created container "minikube" has a running status.
I0516 10:45:17.726792   30132 kic.go:225] Creating ssh key for kic: C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa...
I0516 10:45:18.039116   30132 kic_runner.go:191] docker (temp): C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0516 10:45:18.242127   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0516 10:45:18.400337   30132 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0516 10:45:18.400337   30132 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0516 10:45:18.580309   30132 kic.go:265] ensuring only current user has permissions to key file located at : C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa...
I0516 10:45:19.079411   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0516 10:45:19.192751   30132 machine.go:94] provisionDockerMachine start ...
I0516 10:45:19.200963   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:19.321442   30132 main.go:141] libmachine: Using SSH client type: native
I0516 10:45:19.321442   30132 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0xb5a3c0] 0xb5cfa0 <nil>  [] 0s} 127.0.0.1 50321 <nil> <nil>}
I0516 10:45:19.321442   30132 main.go:141] libmachine: About to run SSH command:
hostname
I0516 10:45:19.450093   30132 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0516 10:45:19.450093   30132 ubuntu.go:169] provisioning hostname "minikube"
I0516 10:45:19.457812   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:19.570388   30132 main.go:141] libmachine: Using SSH client type: native
I0516 10:45:19.570388   30132 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0xb5a3c0] 0xb5cfa0 <nil>  [] 0s} 127.0.0.1 50321 <nil> <nil>}
I0516 10:45:19.570388   30132 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0516 10:45:19.708660   30132 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0516 10:45:19.715398   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:19.830228   30132 main.go:141] libmachine: Using SSH client type: native
I0516 10:45:19.830791   30132 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0xb5a3c0] 0xb5cfa0 <nil>  [] 0s} 127.0.0.1 50321 <nil> <nil>}
I0516 10:45:19.830791   30132 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0516 10:45:19.971926   30132 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0516 10:45:19.971926   30132 ubuntu.go:175] set auth options {CertDir:C:\Users\Joel Rompis\.minikube CaCertPath:C:\Users\Joel Rompis\.minikube\certs\ca.pem CaPrivateKeyPath:C:\Users\Joel Rompis\.minikube\certs\ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:C:\Users\Joel Rompis\.minikube\machines\server.pem ServerKeyPath:C:\Users\Joel Rompis\.minikube\machines\server-key.pem ClientKeyPath:C:\Users\Joel Rompis\.minikube\certs\key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:C:\Users\Joel Rompis\.minikube\certs\cert.pem ServerCertSANs:[] StorePath:C:\Users\Joel Rompis\.minikube}
I0516 10:45:19.971926   30132 ubuntu.go:177] setting up certificates
I0516 10:45:19.971926   30132 provision.go:84] configureAuth start
I0516 10:45:19.979267   30132 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0516 10:45:20.093308   30132 provision.go:143] copyHostCerts
I0516 10:45:20.093815   30132 exec_runner.go:144] found C:\Users\Joel Rompis\.minikube/ca.pem, removing ...
I0516 10:45:20.093815   30132 exec_runner.go:203] rm: C:\Users\Joel Rompis\.minikube\ca.pem
I0516 10:45:20.093815   30132 exec_runner.go:151] cp: C:\Users\Joel Rompis\.minikube\certs\ca.pem --> C:\Users\Joel Rompis\.minikube/ca.pem (1090 bytes)
I0516 10:45:20.094344   30132 exec_runner.go:144] found C:\Users\Joel Rompis\.minikube/cert.pem, removing ...
I0516 10:45:20.094344   30132 exec_runner.go:203] rm: C:\Users\Joel Rompis\.minikube\cert.pem
I0516 10:45:20.094872   30132 exec_runner.go:151] cp: C:\Users\Joel Rompis\.minikube\certs\cert.pem --> C:\Users\Joel Rompis\.minikube/cert.pem (1135 bytes)
I0516 10:45:20.095400   30132 exec_runner.go:144] found C:\Users\Joel Rompis\.minikube/key.pem, removing ...
I0516 10:45:20.095400   30132 exec_runner.go:203] rm: C:\Users\Joel Rompis\.minikube\key.pem
I0516 10:45:20.095400   30132 exec_runner.go:151] cp: C:\Users\Joel Rompis\.minikube\certs\key.pem --> C:\Users\Joel Rompis\.minikube/key.pem (1679 bytes)
I0516 10:45:20.096469   30132 provision.go:117] generating server cert: C:\Users\Joel Rompis\.minikube\machines\server.pem ca-key=C:\Users\Joel Rompis\.minikube\certs\ca.pem private-key=C:\Users\Joel Rompis\.minikube\certs\ca-key.pem org=Joel Rompis.minikube san=[127.0.0.1 192.168.49.2 localhost minikube]
I0516 10:45:20.392317   30132 provision.go:177] copyRemoteCerts
I0516 10:45:20.406902   30132 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0516 10:45:20.414499   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:20.537171   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:20.634507   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\certs\ca.pem --> /etc/docker/ca.pem (1090 bytes)
I0516 10:45:20.651796   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\machines\server.pem --> /etc/docker/server.pem (1192 bytes)
I0516 10:45:20.667679   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\machines\server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0516 10:45:20.684957   30132 provision.go:87] duration metric: took 713.0307ms to configureAuth
I0516 10:45:20.684957   30132 ubuntu.go:193] setting minikube options for container-runtime
I0516 10:45:20.685465   30132 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.30.0
I0516 10:45:20.693503   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:20.810056   30132 main.go:141] libmachine: Using SSH client type: native
I0516 10:45:20.810056   30132 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0xb5a3c0] 0xb5cfa0 <nil>  [] 0s} 127.0.0.1 50321 <nil> <nil>}
I0516 10:45:20.810056   30132 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0516 10:45:20.951903   30132 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0516 10:45:20.951903   30132 ubuntu.go:71] root file system type: overlay
I0516 10:45:20.951903   30132 provision.go:314] Updating docker unit: /lib/systemd/system/docker.service ...
I0516 10:45:20.958981   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:21.068480   30132 main.go:141] libmachine: Using SSH client type: native
I0516 10:45:21.069069   30132 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0xb5a3c0] 0xb5cfa0 <nil>  [] 0s} 127.0.0.1 50321 <nil> <nil>}
I0516 10:45:21.069069   30132 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %s "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0516 10:45:21.210640   30132 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0516 10:45:21.219054   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:21.337726   30132 main.go:141] libmachine: Using SSH client type: native
I0516 10:45:21.337726   30132 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0xb5a3c0] 0xb5cfa0 <nil>  [] 0s} 127.0.0.1 50321 <nil> <nil>}
I0516 10:45:21.337726   30132 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0516 10:45:21.967083   30132 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2024-04-30 11:46:26.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2024-05-16 03:45:21.205144057 +0000
@@ -1,46 +1,49 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
+LimitNOFILE=infinity
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0516 10:45:21.967083   30132 machine.go:97] duration metric: took 2.7743314s to provisionDockerMachine
I0516 10:45:21.967083   30132 client.go:171] duration metric: took 14.9583672s to LocalClient.Create
I0516 10:45:21.967083   30132 start.go:167] duration metric: took 14.9583672s to libmachine.API.Create "minikube"
I0516 10:45:21.967083   30132 start.go:293] postStartSetup for "minikube" (driver="docker")
I0516 10:45:21.967083   30132 start.go:322] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0516 10:45:21.980121   30132 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0516 10:45:21.987740   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:22.096770   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:22.219018   30132 ssh_runner.go:195] Run: cat /etc/os-release
I0516 10:45:22.222954   30132 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0516 10:45:22.222954   30132 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0516 10:45:22.222954   30132 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0516 10:45:22.222954   30132 info.go:137] Remote host: Ubuntu 22.04.4 LTS
I0516 10:45:22.222954   30132 filesync.go:126] Scanning C:\Users\Joel Rompis\.minikube\addons for local assets ...
I0516 10:45:22.223474   30132 filesync.go:126] Scanning C:\Users\Joel Rompis\.minikube\files for local assets ...
I0516 10:45:22.223474   30132 start.go:296] duration metric: took 256.391ms for postStartSetup
I0516 10:45:22.232714   30132 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0516 10:45:22.343061   30132 profile.go:143] Saving config to C:\Users\Joel Rompis\.minikube\profiles\minikube\config.json ...
I0516 10:45:22.359589   30132 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0516 10:45:22.367535   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:22.481617   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:22.585467   30132 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0516 10:45:22.589514   30132 start.go:128] duration metric: took 15.5818438s to createHost
I0516 10:45:22.589514   30132 start.go:83] releasing machines lock for "minikube", held for 15.5823486s
I0516 10:45:22.597354   30132 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0516 10:45:22.705710   30132 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0516 10:45:22.716357   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:22.719295   30132 ssh_runner.go:195] Run: cat /version.json
I0516 10:45:22.727674   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:22.835671   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:22.850505   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:22.945138   30132 ssh_runner.go:195] Run: systemctl --version
I0516 10:45:23.187169   30132 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0516 10:45:23.204261   30132 ssh_runner.go:195] Run: sudo find \etc\cni\net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
W0516 10:45:23.211128   30132 start.go:438] unable to name loopback interface in configureRuntimes: unable to patch loopback cni config "/etc/cni/net.d/*loopback.conf*": sudo find \etc\cni\net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;: Process exited with status 1
stdout:

stderr:
find: '\\etc\\cni\\net.d': No such file or directory
I0516 10:45:23.224855   30132 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%p, " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0516 10:45:23.247738   30132 cni.go:262] disabled [/etc/cni/net.d/87-podman-bridge.conflist, /etc/cni/net.d/100-crio-bridge.conf] bridge cni config(s)
I0516 10:45:23.247738   30132 start.go:494] detecting cgroup driver to use...
I0516 10:45:23.247738   30132 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0516 10:45:23.248244   30132 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0516 10:45:23.275029   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0516 10:45:23.297452   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0516 10:45:23.305305   30132 containerd.go:146] configuring containerd to use "cgroupfs" as cgroup driver...
I0516 10:45:23.319102   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0516 10:45:23.341644   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0516 10:45:23.364470   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0516 10:45:23.386908   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0516 10:45:23.410939   30132 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0516 10:45:23.433678   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0516 10:45:23.458027   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i '/^ *enable_unprivileged_ports = .*/d' /etc/containerd/config.toml"
I0516 10:45:23.482008   30132 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)\[plugins."io.containerd.grpc.v1.cri"\]|&\n\1  enable_unprivileged_ports = true|' /etc/containerd/config.toml"
I0516 10:45:23.505666   30132 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0516 10:45:23.528411   30132 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0516 10:45:23.550521   30132 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0516 10:45:23.661470   30132 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0516 10:45:23.750053   30132 start.go:494] detecting cgroup driver to use...
I0516 10:45:23.750053   30132 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0516 10:45:23.764578   30132 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0516 10:45:23.774313   30132 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0516 10:45:23.791590   30132 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0516 10:45:23.802078   30132 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0516 10:45:23.830658   30132 ssh_runner.go:195] Run: which cri-dockerd
I0516 10:45:23.852731   30132 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0516 10:45:23.863170   30132 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0516 10:45:23.898080   30132 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0516 10:45:24.006842   30132 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0516 10:45:24.088870   30132 docker.go:574] configuring docker to use "cgroupfs" as cgroup driver...
I0516 10:45:24.088870   30132 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0516 10:45:24.117586   30132 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0516 10:45:24.219561   30132 ssh_runner.go:195] Run: sudo systemctl restart docker
I0516 10:45:24.436162   30132 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.socket
I0516 10:45:24.462149   30132 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0516 10:45:24.488194   30132 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0516 10:45:24.594237   30132 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0516 10:45:24.713984   30132 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0516 10:45:24.814866   30132 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0516 10:45:24.841422   30132 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0516 10:45:24.867328   30132 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0516 10:45:24.964092   30132 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.service
I0516 10:45:25.063361   30132 start.go:541] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0516 10:45:25.079819   30132 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0516 10:45:25.084155   30132 start.go:562] Will wait 60s for crictl version
I0516 10:45:25.101555   30132 ssh_runner.go:195] Run: which crictl
I0516 10:45:25.120987   30132 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0516 10:45:25.210631   30132 start.go:578] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  26.1.1
RuntimeApiVersion:  v1
I0516 10:45:25.218909   30132 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0516 10:45:25.305026   30132 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0516 10:45:25.326986   30132 out.go:204] 🐳  Preparing Kubernetes v1.30.0 on Docker 26.1.1 ...
I0516 10:45:25.335730   30132 cli_runner.go:164] Run: docker exec -t minikube dig +short host.docker.internal
I0516 10:45:25.516612   30132 network.go:96] got host ip for mount in container by digging dns: 192.168.65.254
I0516 10:45:25.532103   30132 ssh_runner.go:195] Run: grep 192.168.65.254	host.minikube.internal$ /etc/hosts
I0516 10:45:25.536859   30132 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.65.254	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0516 10:45:25.555513   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0516 10:45:25.679532   30132 kubeadm.go:877] updating cluster {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4000 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:minikube Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:C:\Users\Joel Rompis:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} ...
I0516 10:45:25.679532   30132 preload.go:132] Checking if preload exists for k8s version v1.30.0 and runtime docker
I0516 10:45:25.688862   30132 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0516 10:45:25.707673   30132 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.30.0
registry.k8s.io/kube-controller-manager:v1.30.0
registry.k8s.io/kube-scheduler:v1.30.0
registry.k8s.io/kube-proxy:v1.30.0
registry.k8s.io/etcd:3.5.12-0
registry.k8s.io/coredns/coredns:v1.11.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0516 10:45:25.707673   30132 docker.go:615] Images already preloaded, skipping extraction
I0516 10:45:25.716977   30132 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0516 10:45:25.735192   30132 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.30.0
registry.k8s.io/kube-scheduler:v1.30.0
registry.k8s.io/kube-controller-manager:v1.30.0
registry.k8s.io/kube-proxy:v1.30.0
registry.k8s.io/etcd:3.5.12-0
registry.k8s.io/coredns/coredns:v1.11.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0516 10:45:25.735192   30132 cache_images.go:84] Images are preloaded, skipping loading
I0516 10:45:25.735192   30132 kubeadm.go:928] updating node { 192.168.49.2 8443 v1.30.0 docker true true} ...
I0516 10:45:25.735782   30132 kubeadm.go:940] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.30.0/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.30.0 ClusterName:minikube Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:}
I0516 10:45:25.744933   30132 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0516 10:45:25.883914   30132 cni.go:84] Creating CNI manager for ""
I0516 10:45:25.883914   30132 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0516 10:45:25.883914   30132 kubeadm.go:84] Using pod CIDR: 10.244.0.0/16
I0516 10:45:25.883914   30132 kubeadm.go:181] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.30.0 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[containerRuntimeEndpoint:unix:///var/run/cri-dockerd.sock hairpinMode:hairpin-veth runtimeRequestTimeout:15m] PrependCriSocketUnix:true}
I0516 10:45:25.884457   30132 kubeadm.go:187] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: unix:///var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.30.0
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
containerRuntimeEndpoint: unix:///var/run/cri-dockerd.sock
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%"
  nodefs.inodesFree: "0%"
  imagefs.available: "0%"
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0516 10:45:25.899811   30132 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.30.0
I0516 10:45:25.908158   30132 binaries.go:44] Found k8s binaries, skipping transfer
I0516 10:45:25.923906   30132 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0516 10:45:25.934049   30132 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (307 bytes)
I0516 10:45:25.948614   30132 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0516 10:45:25.962330   30132 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2150 bytes)
I0516 10:45:25.992643   30132 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0516 10:45:25.998643   30132 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0516 10:45:26.022853   30132 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0516 10:45:26.112523   30132 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0516 10:45:26.124337   30132 certs.go:68] Setting up C:\Users\Joel Rompis\.minikube\profiles\minikube for IP: 192.168.49.2
I0516 10:45:26.124337   30132 certs.go:194] generating shared ca certs ...
I0516 10:45:26.124848   30132 certs.go:226] acquiring lock for ca certs: {Name:mk02e0d386154ec31a58b40de45e999b367c3a0f Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.125465   30132 certs.go:235] skipping valid "minikubeCA" ca cert: C:\Users\Joel Rompis\.minikube\ca.key
I0516 10:45:26.126407   30132 certs.go:235] skipping valid "proxyClientCA" ca cert: C:\Users\Joel Rompis\.minikube\proxy-client-ca.key
I0516 10:45:26.126407   30132 certs.go:256] generating profile certs ...
I0516 10:45:26.126931   30132 certs.go:363] generating signed profile cert for "minikube-user": C:\Users\Joel Rompis\.minikube\profiles\minikube\client.key
I0516 10:45:26.126931   30132 crypto.go:68] Generating cert C:\Users\Joel Rompis\.minikube\profiles\minikube\client.crt with IP's: []
I0516 10:45:26.227252   30132 crypto.go:156] Writing cert to C:\Users\Joel Rompis\.minikube\profiles\minikube\client.crt ...
I0516 10:45:26.227252   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\client.crt: {Name:mkf0e3a3e0aa9b69c9a355bc1c8e7d3f03578477 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.233373   30132 crypto.go:164] Writing key to C:\Users\Joel Rompis\.minikube\profiles\minikube\client.key ...
I0516 10:45:26.233373   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\client.key: {Name:mk7a4b594a90cbf51d1d74e2ca4d21ab49fcb40c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.233373   30132 certs.go:363] generating signed profile cert for "minikube": C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.key.7fb57e3c
I0516 10:45:26.233373   30132 crypto.go:68] Generating cert C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.crt.7fb57e3c with IP's: [10.96.0.1 127.0.0.1 10.0.0.1 192.168.49.2]
I0516 10:45:26.258630   30132 crypto.go:156] Writing cert to C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.crt.7fb57e3c ...
I0516 10:45:26.258630   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.crt.7fb57e3c: {Name:mk3fade0860cefaf997dec8fa14f14dc190ec25f Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.258630   30132 crypto.go:164] Writing key to C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.key.7fb57e3c ...
I0516 10:45:26.258630   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.key.7fb57e3c: {Name:mk8610fdb93d6578265e5cb5f3261f14ae628ba8 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.267121   30132 certs.go:381] copying C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.crt.7fb57e3c -> C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.crt
I0516 10:45:26.279553   30132 certs.go:385] copying C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.key.7fb57e3c -> C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.key
I0516 10:45:26.280481   30132 certs.go:363] generating signed profile cert for "aggregator": C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.key
I0516 10:45:26.280481   30132 crypto.go:68] Generating cert C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.crt with IP's: []
I0516 10:45:26.335220   30132 crypto.go:156] Writing cert to C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.crt ...
I0516 10:45:26.335220   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.crt: {Name:mke51da0a55e836ba09ac3f49bd63c150a153b7a Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.335220   30132 crypto.go:164] Writing key to C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.key ...
I0516 10:45:26.335220   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.key: {Name:mk181d4a8688391d8391051a90270749a427ebf2 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:26.354898   30132 certs.go:484] found cert: C:\Users\Joel Rompis\.minikube\certs\ca-key.pem (1675 bytes)
I0516 10:45:26.354898   30132 certs.go:484] found cert: C:\Users\Joel Rompis\.minikube\certs\ca.pem (1090 bytes)
I0516 10:45:26.354898   30132 certs.go:484] found cert: C:\Users\Joel Rompis\.minikube\certs\cert.pem (1135 bytes)
I0516 10:45:26.354898   30132 certs.go:484] found cert: C:\Users\Joel Rompis\.minikube\certs\key.pem (1679 bytes)
I0516 10:45:26.356344   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0516 10:45:26.376072   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0516 10:45:26.393862   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0516 10:45:26.409828   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1675 bytes)
I0516 10:45:26.429145   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1411 bytes)
I0516 10:45:26.447275   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\profiles\minikube\apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0516 10:45:26.465826   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0516 10:45:26.484737   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\profiles\minikube\proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1675 bytes)
I0516 10:45:26.503422   30132 ssh_runner.go:362] scp C:\Users\Joel Rompis\.minikube\ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0516 10:45:26.522649   30132 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0516 10:45:26.552092   30132 ssh_runner.go:195] Run: openssl version
I0516 10:45:26.576178   30132 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0516 10:45:26.602245   30132 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0516 10:45:26.607497   30132 certs.go:528] hashing: -rw-r--r-- 1 root root 1111 May 16 02:52 /usr/share/ca-certificates/minikubeCA.pem
I0516 10:45:26.623065   30132 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0516 10:45:26.646277   30132 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0516 10:45:26.671255   30132 ssh_runner.go:195] Run: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt
I0516 10:45:26.676385   30132 certs.go:399] 'apiserver-kubelet-client' cert doesn't exist, likely first start: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt: Process exited with status 1
stdout:

stderr:
stat: cannot statx '/var/lib/minikube/certs/apiserver-kubelet-client.crt': No such file or directory
I0516 10:45:26.676892   30132 kubeadm.go:391] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4000 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:minikube Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:C:\Users\Joel Rompis:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0516 10:45:26.685403   30132 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0516 10:45:26.717571   30132 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0516 10:45:26.740887   30132 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0516 10:45:26.750093   30132 kubeadm.go:213] ignoring SystemVerification for kubeadm because of docker driver
I0516 10:45:26.765396   30132 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0516 10:45:26.774937   30132 kubeadm.go:154] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0516 10:45:26.774937   30132 kubeadm.go:156] found existing configuration files:

I0516 10:45:26.791241   30132 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf
I0516 10:45:26.799936   30132 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/admin.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/admin.conf: No such file or directory
I0516 10:45:26.817185   30132 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/admin.conf
I0516 10:45:26.841600   30132 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf
I0516 10:45:26.850331   30132 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/kubelet.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/kubelet.conf: No such file or directory
I0516 10:45:26.865811   30132 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/kubelet.conf
I0516 10:45:26.889575   30132 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf
I0516 10:45:26.899243   30132 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/controller-manager.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/controller-manager.conf: No such file or directory
I0516 10:45:26.914636   30132 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/controller-manager.conf
I0516 10:45:26.938073   30132 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf
I0516 10:45:26.945923   30132 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/scheduler.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/scheduler.conf: No such file or directory
I0516 10:45:26.961182   30132 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/scheduler.conf
I0516 10:45:26.968822   30132 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.30.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0516 10:45:27.039348   30132 kubeadm.go:309] 	[WARNING Swap]: swap is supported for cgroup v2 only; the NodeSwap feature gate of the kubelet is beta but disabled by default
I0516 10:45:27.092972   30132 kubeadm.go:309] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0516 10:45:35.438681   30132 kubeadm.go:309] [init] Using Kubernetes version: v1.30.0
I0516 10:45:35.438681   30132 kubeadm.go:309] [preflight] Running pre-flight checks
I0516 10:45:35.438681   30132 kubeadm.go:309] [preflight] Pulling images required for setting up a Kubernetes cluster
I0516 10:45:35.438681   30132 kubeadm.go:309] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0516 10:45:35.438681   30132 kubeadm.go:309] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0516 10:45:35.438681   30132 kubeadm.go:309] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0516 10:45:35.439202   30132 out.go:204]     ▪ Generating certificates and keys ...
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Using existing ca certificate authority
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Using existing apiserver certificate and key on disk
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Generating "apiserver-kubelet-client" certificate and key
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Generating "front-proxy-ca" certificate and key
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Generating "front-proxy-client" certificate and key
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Generating "etcd/ca" certificate and key
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] Generating "etcd/server" certificate and key
I0516 10:45:35.439724   30132 kubeadm.go:309] [certs] etcd/server serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I0516 10:45:35.440244   30132 kubeadm.go:309] [certs] Generating "etcd/peer" certificate and key
I0516 10:45:35.440244   30132 kubeadm.go:309] [certs] etcd/peer serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I0516 10:45:35.440244   30132 kubeadm.go:309] [certs] Generating "etcd/healthcheck-client" certificate and key
I0516 10:45:35.440244   30132 kubeadm.go:309] [certs] Generating "apiserver-etcd-client" certificate and key
I0516 10:45:35.440244   30132 kubeadm.go:309] [certs] Generating "sa" key and public key
I0516 10:45:35.440244   30132 kubeadm.go:309] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0516 10:45:35.440244   30132 kubeadm.go:309] [kubeconfig] Writing "admin.conf" kubeconfig file
I0516 10:45:35.440244   30132 kubeadm.go:309] [kubeconfig] Writing "super-admin.conf" kubeconfig file
I0516 10:45:35.440244   30132 kubeadm.go:309] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I0516 10:45:35.440244   30132 kubeadm.go:309] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0516 10:45:35.440764   30132 kubeadm.go:309] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I0516 10:45:35.440764   30132 kubeadm.go:309] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0516 10:45:35.440764   30132 kubeadm.go:309] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I0516 10:45:35.440764   30132 out.go:204]     ▪ Booting up control plane ...
I0516 10:45:35.441283   30132 kubeadm.go:309] [control-plane] Creating static Pod manifest for "kube-apiserver"
I0516 10:45:35.441283   30132 kubeadm.go:309] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I0516 10:45:35.441283   30132 kubeadm.go:309] [control-plane] Creating static Pod manifest for "kube-scheduler"
I0516 10:45:35.441283   30132 kubeadm.go:309] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I0516 10:45:35.441283   30132 kubeadm.go:309] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I0516 10:45:35.441283   30132 kubeadm.go:309] [kubelet-start] Starting the kubelet
I0516 10:45:35.441805   30132 kubeadm.go:309] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests"
I0516 10:45:35.441805   30132 kubeadm.go:309] [kubelet-check] Waiting for a healthy kubelet. This can take up to 4m0s
I0516 10:45:35.441805   30132 kubeadm.go:309] [kubelet-check] The kubelet is healthy after 501.186569ms
I0516 10:45:35.441805   30132 kubeadm.go:309] [api-check] Waiting for a healthy API server. This can take up to 4m0s
I0516 10:45:35.441805   30132 kubeadm.go:309] [api-check] The API server is healthy after 4.001296573s
I0516 10:45:35.441805   30132 kubeadm.go:309] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0516 10:45:35.441805   30132 kubeadm.go:309] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0516 10:45:35.441805   30132 kubeadm.go:309] [upload-certs] Skipping phase. Please see --upload-certs
I0516 10:45:35.442325   30132 kubeadm.go:309] [mark-control-plane] Marking the node minikube as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I0516 10:45:35.442325   30132 kubeadm.go:309] [bootstrap-token] Using token: etjnxz.glngutvyhvsr96ox
I0516 10:45:35.442325   30132 out.go:204]     ▪ Configuring RBAC rules ...
I0516 10:45:35.442865   30132 kubeadm.go:309] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I0516 10:45:35.442865   30132 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I0516 10:45:35.442865   30132 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I0516 10:45:35.442865   30132 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I0516 10:45:35.442865   30132 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I0516 10:45:35.442865   30132 kubeadm.go:309] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0516 10:45:35.443389   30132 kubeadm.go:309] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0516 10:45:35.443389   30132 kubeadm.go:309] [addons] Applied essential addon: CoreDNS
I0516 10:45:35.443389   30132 kubeadm.go:309] [addons] Applied essential addon: kube-proxy
I0516 10:45:35.443389   30132 kubeadm.go:309] 
I0516 10:45:35.443389   30132 kubeadm.go:309] Your Kubernetes control-plane has initialized successfully!
I0516 10:45:35.443389   30132 kubeadm.go:309] 
I0516 10:45:35.443389   30132 kubeadm.go:309] To start using your cluster, you need to run the following as a regular user:
I0516 10:45:35.443389   30132 kubeadm.go:309] 
I0516 10:45:35.443389   30132 kubeadm.go:309]   mkdir -p $HOME/.kube
I0516 10:45:35.443389   30132 kubeadm.go:309]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I0516 10:45:35.443389   30132 kubeadm.go:309]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I0516 10:45:35.443389   30132 kubeadm.go:309] 
I0516 10:45:35.443389   30132 kubeadm.go:309] Alternatively, if you are the root user, you can run:
I0516 10:45:35.443389   30132 kubeadm.go:309] 
I0516 10:45:35.443389   30132 kubeadm.go:309]   export KUBECONFIG=/etc/kubernetes/admin.conf
I0516 10:45:35.443389   30132 kubeadm.go:309] 
I0516 10:45:35.443933   30132 kubeadm.go:309] You should now deploy a pod network to the cluster.
I0516 10:45:35.443933   30132 kubeadm.go:309] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I0516 10:45:35.443933   30132 kubeadm.go:309]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I0516 10:45:35.443933   30132 kubeadm.go:309] 
I0516 10:45:35.443933   30132 kubeadm.go:309] You can now join any number of control-plane nodes by copying certificate authorities
I0516 10:45:35.443933   30132 kubeadm.go:309] and service account keys on each node and then running the following as root:
I0516 10:45:35.443933   30132 kubeadm.go:309] 
I0516 10:45:35.443933   30132 kubeadm.go:309]   kubeadm join control-plane.minikube.internal:8443 --token etjnxz.glngutvyhvsr96ox \
I0516 10:45:35.443933   30132 kubeadm.go:309] 	--discovery-token-ca-cert-hash sha256:54c553c7f68e95a370cecfa625553d356d7843ef232d216be544ec5dd88e798a \
I0516 10:45:35.443933   30132 kubeadm.go:309] 	--control-plane 
I0516 10:45:35.443933   30132 kubeadm.go:309] 
I0516 10:45:35.443933   30132 kubeadm.go:309] Then you can join any number of worker nodes by running the following on each as root:
I0516 10:45:35.443933   30132 kubeadm.go:309] 
I0516 10:45:35.444496   30132 kubeadm.go:309] kubeadm join control-plane.minikube.internal:8443 --token etjnxz.glngutvyhvsr96ox \
I0516 10:45:35.444496   30132 kubeadm.go:309] 	--discovery-token-ca-cert-hash sha256:54c553c7f68e95a370cecfa625553d356d7843ef232d216be544ec5dd88e798a 
I0516 10:45:35.444496   30132 cni.go:84] Creating CNI manager for ""
I0516 10:45:35.444496   30132 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0516 10:45:35.444496   30132 out.go:177] 🔗  Configuring bridge CNI (Container Networking Interface) ...
I0516 10:45:35.456308   30132 ssh_runner.go:195] Run: sudo mkdir -p /etc/cni/net.d
I0516 10:45:35.462530   30132 ssh_runner.go:362] scp memory --> /etc/cni/net.d/1-k8s.conflist (496 bytes)
I0516 10:45:35.473306   30132 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0516 10:45:35.478817   30132 ops.go:34] apiserver oom_adj: -16
I0516 10:45:35.489970   30132 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig label --overwrite nodes minikube minikube.k8s.io/updated_at=2024_05_16T10_45_35_0700 minikube.k8s.io/version=v1.33.1 minikube.k8s.io/commit=5883c09216182566a63dff4c326a6fc9ed2982ff minikube.k8s.io/name=minikube minikube.k8s.io/primary=true
I0516 10:45:35.490249   30132 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.30.0/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0516 10:45:35.568719   30132 kubeadm.go:1107] duration metric: took 95.4128ms to wait for elevateKubeSystemPrivileges
W0516 10:45:35.568719   30132 kubeadm.go:286] apiserver tunnel failed: apiserver port not set
I0516 10:45:35.568719   30132 kubeadm.go:393] duration metric: took 8.891827s to StartCluster
I0516 10:45:35.568719   30132 settings.go:142] acquiring lock: {Name:mk4f2a02f489628bc293be72dddb91ea5029989c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:35.569261   30132 settings.go:150] Updating kubeconfig:  C:\Users\Joel Rompis\.kube\config
I0516 10:45:35.569783   30132 lock.go:35] WriteFile acquiring C:\Users\Joel Rompis\.kube\config: {Name:mk8028fa50f791ce259a37e06b14754f6da40b4b Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0516 10:45:35.570582   30132 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I0516 10:45:35.570582   30132 start.go:234] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}
I0516 10:45:35.570582   30132 addons.go:502] enable addons start: toEnable=map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:true efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false inspektor-gadget:false istio:false istio-provisioner:false kong:false kubeflow:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-device-plugin:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false storage-provisioner-rancher:false volumesnapshots:false yakd:false]
I0516 10:45:35.571129   30132 out.go:177] 🔎  Verifying Kubernetes components...
I0516 10:45:35.570582   30132 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.30.0
I0516 10:45:35.571129   30132 addons.go:69] Setting storage-provisioner=true in profile "minikube"
I0516 10:45:35.571129   30132 addons.go:234] Setting addon storage-provisioner=true in "minikube"
I0516 10:45:35.571129   30132 addons.go:69] Setting default-storageclass=true in profile "minikube"
I0516 10:45:35.571129   30132 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "minikube"
I0516 10:45:35.571663   30132 host.go:66] Checking if "minikube" exists ...
I0516 10:45:35.592592   30132 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0516 10:45:35.592592   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0516 10:45:35.594049   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0516 10:45:35.652238   30132 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.65.254 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I0516 10:45:35.732188   30132 addons.go:234] Setting addon default-storageclass=true in "minikube"
I0516 10:45:35.732718   30132 host.go:66] Checking if "minikube" exists ...
I0516 10:45:35.745983   30132 out.go:177]     ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0516 10:45:35.747048   30132 addons.go:426] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0516 10:45:35.747048   30132 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0516 10:45:35.747919   30132 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0516 10:45:35.759452   30132 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0516 10:45:35.761113   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:35.909597   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:35.924963   30132 addons.go:426] installing /etc/kubernetes/addons/storageclass.yaml
I0516 10:45:35.924963   30132 ssh_runner.go:362] scp storageclass/storageclass.yaml --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0516 10:45:35.929205   30132 start.go:946] {"host.minikube.internal": 192.168.65.254} host record injected into CoreDNS's ConfigMap
I0516 10:45:35.940817   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0516 10:45:35.944410   30132 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0516 10:45:36.058046   30132 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.30.0/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0516 10:45:36.097368   30132 api_server.go:52] waiting for apiserver process to appear ...
I0516 10:45:36.118963   30132 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:50321 SSHKeyPath:C:\Users\Joel Rompis\.minikube\machines\minikube\id_rsa Username:docker}
I0516 10:45:36.122620   30132 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0516 10:45:36.255420   30132 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.30.0/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0516 10:45:36.338665   30132 api_server.go:72] duration metric: took 768.0827ms to wait for apiserver process to appear ...
I0516 10:45:36.338665   30132 api_server.go:88] waiting for apiserver healthz status ...
I0516 10:45:36.338665   30132 api_server.go:253] Checking apiserver healthz at https://127.0.0.1:50325/healthz ...
I0516 10:45:36.387717   30132 api_server.go:279] https://127.0.0.1:50325/healthz returned 200:
ok
I0516 10:45:36.389822   30132 api_server.go:141] control plane version: v1.30.0
I0516 10:45:36.389822   30132 api_server.go:131] duration metric: took 51.1565ms to wait for apiserver health ...
I0516 10:45:36.389822   30132 system_pods.go:43] waiting for kube-system pods to appear ...
I0516 10:45:36.403744   30132 system_pods.go:59] 5 kube-system pods found
I0516 10:45:36.403744   30132 system_pods.go:61] "etcd-minikube" [77d22f6d-be17-48f5-8837-09419d51679e] Running / Ready:ContainersNotReady (containers with unready status: [etcd]) / ContainersReady:ContainersNotReady (containers with unready status: [etcd])
I0516 10:45:36.403744   30132 system_pods.go:61] "kube-apiserver-minikube" [30f4ccfc-d664-4673-b29b-c05e424886b6] Running / Ready:ContainersNotReady (containers with unready status: [kube-apiserver]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-apiserver])
I0516 10:45:36.403744   30132 system_pods.go:61] "kube-controller-manager-minikube" [76b08cb1-d6ab-4bf4-b964-dba0183dd9ce] Running / Ready:ContainersNotReady (containers with unready status: [kube-controller-manager]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-controller-manager])
I0516 10:45:36.403744   30132 system_pods.go:61] "kube-scheduler-minikube" [16341e3b-5b1d-4afc-92d6-ac10b262adde] Running / Ready:ContainersNotReady (containers with unready status: [kube-scheduler]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-scheduler])
I0516 10:45:36.403744   30132 system_pods.go:61] "storage-provisioner" [6afa6d22-d188-44ed-b095-74ee04d20bb4] Pending: PodScheduled:Unschedulable (0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling.)
I0516 10:45:36.403744   30132 system_pods.go:74] duration metric: took 13.9221ms to wait for pod list to return data ...
I0516 10:45:36.404293   30132 kubeadm.go:576] duration metric: took 833.7108ms to wait for: map[apiserver:true system_pods:true]
I0516 10:45:36.404293   30132 node_conditions.go:102] verifying NodePressure condition ...
I0516 10:45:36.408306   30132 node_conditions.go:122] node storage ephemeral capacity is 1055762868Ki
I0516 10:45:36.408306   30132 node_conditions.go:123] node cpu capacity is 16
I0516 10:45:36.408849   30132 node_conditions.go:105] duration metric: took 4.5562ms to run NodePressure ...
I0516 10:45:36.408849   30132 start.go:240] waiting for startup goroutines ...
I0516 10:45:36.420647   30132 out.go:177] 🌟  Enabled addons: storage-provisioner, default-storageclass
I0516 10:45:36.421721   30132 addons.go:505] duration metric: took 851.1391ms for enable addons: enabled=[storage-provisioner default-storageclass]
I0516 10:45:36.437547   30132 kapi.go:248] "coredns" deployment in "kube-system" namespace and "minikube" context rescaled to 1 replicas
I0516 10:45:36.437547   30132 start.go:245] waiting for cluster config update ...
I0516 10:45:36.437547   30132 start.go:254] writing updated cluster config ...
I0516 10:45:36.457675   30132 ssh_runner.go:195] Run: rm -f paused
I0516 10:45:36.568084   30132 start.go:600] kubectl: 1.29.2, cluster: 1.30.0 (minor skew: 1)
I0516 10:45:36.568613   30132 out.go:177] 🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
